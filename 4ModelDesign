# prompt: Design a Pytorch based neural network model to train on the data. Add a vectorization layer and embedding layer. Use only linear layers.

import torch
import torch.nn as nn

class SpamClassifier(nn.Module):
    def __init__(self, vocab_size, embedding_dim, hidden_dim, output_dim):
        super(SpamClassifier, self).__init__()
        self.embedding = nn.Embedding(vocab_size, embedding_dim)
        self.fc1 = nn.Linear(embedding_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, output_dim)

    def forward(self, text):
        embedded = self.embedding(text)
        # Assuming you want to average the embeddings for simplicity
        embedded = torch.mean(embedded, dim=1)
        out = torch.relu(self.fc1(embedded))
        out = self.fc2(out)
        return out


# Example usage
vocab_size = len(vocab) + 1  # Add 1 for padding token
embedding_dim = 100
hidden_dim = 128
output_dim = 2  # Binary classification (spam or ham)

model = SpamClassifier(vocab_size, embedding_dim, hidden_dim, output_dim)
